{"version":3,"sources":["PathFindingVisualizer/Node/Node.js","Algorithms/Dijkstra.js","Algorithms/BellmanFord.js","PathFindingVisualizer/PathFindingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","isWeight","onMouseDown","onMouseEnter","onMouseUp","row","icon","className","wallClassName","id","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","relax","source","destination","weight","previousNode","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","bellmanFord","visitedNodes","vertices","edges","unpackedEdges","map","edge","getEdges","array","i","j","Math","floor","random","shuffleArray","forEach","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","wPressed","bind","state","mouseIsPressed","startIsPressed","endIsPressed","wKeyIsPressed","previousStart","previousEnd","isAlgoDone","isAnimation","getInitialGrid","setState","document","addEventListener","removeEventListener","prevProps","prevState","snapshot","visualizeDijkstra","event","keyCode","isEnd","newGrid","getNewGridWithWeightToggled","getNewGridWithWallToggled","getNewGridWithStartNodeUpdated","getNewGridWithEndNodeUpdated","visitedNodesInOrderLength","getElementById","setTimeout","animateShortestPath","previousNodeDocumentElement","childNodes","parentNode","removeChild","nodeDocumentElement","icon_truck","createElement","append","animate","animateDijkstra","resetNodesVisited","displayDijkstra","classList","remove","getNodesInShortestPathOrderBF","animateBellmanFord","onClick","visualizeBellmanFord","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","pStart","newStart","pEnd","newEnd","App","gridId","uniqueId","resetGrid","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wWAIqBA,G,uLACP,IAAD,EAWDC,KAAKC,MATLC,EAFC,EAEDA,IACAC,EAHC,EAGDA,SACAC,EAJC,EAIDA,QACAC,EALC,EAKDA,OACAC,EANC,EAMDA,SACAC,EAPC,EAODA,YACAC,EARC,EAQDA,aACAC,EATC,EASDA,UACAC,EAVC,EAUDA,IAEEC,EAAOR,EACP,uBAAGS,UAAU,0BACbR,EACI,uBAAGQ,UAAU,yBACbN,EACI,uBAAGM,UAAU,yBACb,GACRC,EAAgBR,EAAS,YAAc,GAO7C,OACI,yBACIS,GAAE,eAAUJ,EAAV,YAAiBR,GACnBU,UAAS,eAAUC,GACnBN,YAAa,kBAAMA,EAAYG,EAAKR,IACpCM,aAAc,kBAAMA,EAAaE,EAAKR,IACtCO,UAAW,kBAAMA,MAAcE,O,GAjCbI,cCA3B,SAASC,EAASC,EAAMC,EAAWC,GACtC,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EAErB,IADA,IAAMC,EA+CV,SAAqBL,GACjB,IAAMM,EAAQ,GADS,uBAEvB,YAAkBN,EAAlB,+CAAwB,CAAC,IAAdP,EAAa,+BACpB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdc,EAAa,QACpBD,EAAME,KAAKD,IAFK,oFAFD,kFAOvB,OAAOD,EAtDgBG,CAAYT,GAC1BK,EAAeK,QAAQ,CAC5BC,EAAoBN,GACpB,IAAMO,EAAcP,EAAeQ,QAEnC,IAAID,EAAYxB,OAAhB,CAGA,GAAIwB,EAAYR,WAAaU,IAAU,OAAOX,EAG9C,GAFAS,EAAYG,WAAY,EACxBZ,EAAoBK,KAAKI,GACrBA,IAAgBV,EAAY,OAAOC,EACvCa,EAAyBJ,EAAaZ,KAI9C,SAASW,EAAoBN,GACzBA,EAAeY,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMd,SAAWe,EAAMf,YAGjE,SAASY,EAAyBT,EAAMP,GACpC,IAAMoB,EAgBV,SAA+Bb,EAAMP,GACjC,IAAMqB,EAAY,GACXpC,EAAYsB,EAAZtB,IAAKQ,EAAOc,EAAPd,IACRA,EAAM,GAAG4B,EAAUb,KAAKR,EAAKP,EAAM,GAAGR,IACtCQ,EAAMO,EAAKU,OAAS,GAAGW,EAAUb,KAAKR,EAAKP,EAAM,GAAGR,IACpDA,EAAM,GAAGoC,EAAUb,KAAKR,EAAKP,GAAKR,EAAM,IACxCA,EAAMe,EAAK,GAAGU,OAAS,GAAGW,EAAUb,KAAKR,EAAKP,GAAKR,EAAM,IAC7D,OAAOoC,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAASR,aAvBnBS,CAAsBjB,EAAMP,GADb,uBAE1C,YAAuBoB,EAAvB,+CAA2C,CAAC,IAAjCG,EAAgC,QACvCE,EAAMlB,EAAMgB,EAAUA,EAASlC,WAHO,mFAO9C,SAASoC,EAAMC,EAAQC,EAAatC,GAChC,IAAIuC,EAAS,EACVvC,IACCuC,EAAS,GACVD,EAAYvB,SAAWsB,EAAOtB,SAAWwB,IACxCD,EAAYvB,SAAWsB,EAAOtB,SAAWwB,EACzCD,EAAYE,aAAeH,GA0B5B,SAASI,EAA4B5B,GAGxC,IAFA,IAAM6B,EAA2B,GAC7BC,EAAc9B,EACK,OAAhB8B,GACHD,EAAyBE,QAAQD,GACjCA,EAAcA,EAAYH,aAE9B,OAAOE,E,kBCrEJ,SAASG,EAAYlC,EAAMC,EAAWC,GACzC,IAAMiC,EAAe,GACrBlC,EAAUG,SAAW,EACrB,IAAMgC,EA8CV,SAAqBpC,GACjB,IAAMM,EAAQ,GADS,uBAEvB,YAAkBN,EAAlB,+CAAwB,CAAC,IAAdP,EAAa,+BACpB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdc,EAAa,QACpBD,EAAME,KAAKD,IAFK,oFAFD,kFAOvB,OAAOD,EArDUG,CAAYT,GAAMsB,QAAO,SAAAf,GAAI,OAAKA,EAAKnB,UAClDiD,EAcV,SAAkBD,EAAUpC,GACxB,IAAIsC,EAAgB,GAChBD,EAAQD,EAASG,KAAI,SAAAhC,GAAI,OAmBjC,SAA+BA,EAAMP,GACjC,IAAMqB,EAAY,GACXpC,EAAYsB,EAAZtB,IAAKQ,EAAOc,EAAPd,IACRA,EAAM,GAAG4B,EAAUb,KAAKR,EAAKP,EAAM,GAAGR,IACtCQ,EAAMO,EAAKU,OAAS,GAAGW,EAAUb,KAAKR,EAAKP,EAAM,GAAGR,IACpDA,EAAM,GAAGoC,EAAUb,KAAKR,EAAKP,GAAKR,EAAM,IACxCA,EAAMe,EAAK,GAAGU,OAAS,GAAGW,EAAUb,KAAKR,EAAKP,GAAKR,EAAM,IAC7D,OAAOoC,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAASnC,UA1BboC,CAAsBjB,EAAMP,GAAMuC,KAAI,SAAAhB,GAAQ,MAAI,CAAChB,EAAMgB,SAF5D,uBAG9B,YAAwBc,EAAxB,+CAA+B,CAAC,IAArBhB,EAAoB,+BAC3B,YAAmBA,EAAnB,+CAA8B,CAAC,IAApBmB,EAAmB,QAC1BF,EAAc9B,KAAKgC,IAFI,oFAHD,kFAQ9B,OAAOF,EAtBOG,CAASL,EAAUpC,GAIjCmC,EAAa3B,KAAb,MAAA2B,EAAY,YAASE,EAAME,KAAI,SAAAC,GAAI,OAAIA,EAAK,QA+DhD,SAAsBE,GAClB,IAAK,IAAIC,EAAID,EAAMhC,OAAS,EAAGiC,EAAI,EAAGA,IAAK,CACvC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADH,EAEhB,CAACD,EAAME,GAAIF,EAAMC,IAAvCD,EAAMC,GAFgC,KAE5BD,EAAME,GAFsB,MA/D3CI,CAAab,GAEb,IAAK,IAAIQ,EAAI,EAAGA,EAAIP,EAAS1B,OAAS,EAAGiC,IACrCN,EAAMY,SAAQ,SAAAT,GAAI,OAAIf,EAAMe,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAGnD,aAG1D,OAAO8C,EAcX,SAASV,EAAMC,EAAQC,EAAatC,GAChC,IAAIuC,EAAS,EACTvC,IACAuC,EAAS,GACTD,EAAYvB,SAAWsB,EAAOtB,SAAWwB,IACzCD,EAAYvB,SAAWsB,EAAOtB,SAAWwB,EACzCD,EAAYE,aAAeH,G,yjBChCnC,IAAMwB,EAAiB,GACjBC,EAAiB,GACjBC,EAAkB,GAClBC,EAAkB,GAEHC,E,YACjB,WAAYtE,GAAQ,IAAD,8BACf,4CAAMA,KACDuE,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,MAAQ,CACTzD,KAAM,GACN0D,gBAAgB,EAChBC,gBAAgB,EAChBC,cAAc,EACdC,eAAe,EACfC,cAAe,CAACrE,IAAKyD,EAAgBjE,IAAKkE,GAC1CY,YAAa,CAACtE,IAAK2D,EAAiBnE,IAAKoE,GACzCW,YAAY,EACZC,aAAa,GAZF,E,iFAiBf,IAAMjE,EAAOkE,IACbnF,KAAKoF,SAAS,CAACnE,SACfoE,SAASC,iBAAiB,UAAWtF,KAAKwE,UAAU,K,6CAIpDa,SAASE,oBAAoB,UAAWvF,KAAKwE,UAAU,K,yCAGxCgB,EAAWC,EAAWC,IACd1F,KAAK0E,MAAMG,cAAgB7E,KAAK0E,MAAME,iBAAmB5E,KAAK0E,MAAMO,aACnFQ,EAAUT,cAAgBhF,KAAK0E,MAAMM,aAAeS,EAAUV,gBAAkB/E,KAAK0E,MAAMK,gBAC/E/E,KAAK2F,mBAAkB,K,+BAGtCC,GACiB,KAAlBA,EAAMC,SACN7F,KAAKoF,SAAS,CAACN,eAAgB9E,KAAK0E,MAAMI,kB,sCAIlCpE,EAAKR,EAAKE,EAAS0F,GAC/B,IAAK9F,KAAK0E,MAAMQ,YACZ,GAAI9E,EACAJ,KAAKoF,SAAS,CAACR,gBAAgB,EAAMD,gBAAgB,EAAMI,cAAe,CAACrE,MAAKR,cAC7E,GAAI4F,EACP9F,KAAKoF,SAAS,CAACP,cAAc,EAAMF,gBAAgB,EAAMK,YAAa,CAACtE,MAAKR,aACzE,CACH,IAAI6F,EAEAA,EADA/F,KAAK0E,MAAMI,cACDkB,EAA4BhG,KAAK0E,MAAMzD,KAAMP,EAAKR,GAElD+F,EAA0BjG,KAAK0E,MAAMzD,KAAMP,EAAKR,GAE9DF,KAAKoF,SAAS,CAACnE,KAAM8E,EAASpB,gBAAgB,O,uCAKzCjE,EAAKR,GAClB,GAAKF,KAAK0E,MAAMC,eAChB,GAAK3E,KAAK0E,MAAME,gBAAmB5E,KAAK0E,MAAMG,aAQvC,CAEH,IAAM5B,EAAcjD,KAAK0E,MAAMzD,KAAKP,GAAKR,GACzC,IAAK+C,EAAY5C,OACb,GAAIL,KAAK0E,MAAME,iBAAmB3B,EAAY9C,SAAU,CACpD,IAAM4F,EAAUG,EAA+BlG,KAAK0E,MAAMzD,KAAMjB,KAAK0E,MAAMK,cAAerE,EAAKR,GAC/FF,KAAKoF,SAAS,CAACnE,KAAM8E,EAAShB,cAAe,CAACrE,MAAKR,cAChD,IAAK+C,EAAY7C,SAAWJ,KAAK0E,MAAMG,aAAc,CACxD,IAAMkB,EAAUI,EAA6BnG,KAAK0E,MAAMzD,KAAMjB,KAAK0E,MAAMM,YAAatE,EAAKR,GAC3FF,KAAKoF,SAAS,CAACnE,KAAM8E,EAASf,YAAa,CAACtE,MAAKR,cAjBD,CACxD,IAAI6F,EAEAA,EADA/F,KAAK0E,MAAMI,cACDkB,EAA4BhG,KAAK0E,MAAMzD,KAAMP,EAAKR,GAElD+F,EAA0BjG,KAAK0E,MAAMzD,KAAMP,EAAKR,GAE9DF,KAAKoF,SAAS,CAACnE,KAAM8E,O,sCAiBzB/F,KAAKoF,SAAS,CAACT,gBAAgB,EAAOC,gBAAgB,EAAOC,cAAc,M,sCAK/DzD,EAAqB4B,GAIjC,IAFA,IAAMoD,EAA4BhF,EAAoBO,OAAS,EAEtDiC,EAAI,EAAGA,GAAKwC,EAA2BxC,IAAK,CACjD,GAAIA,IAAMwC,EAA2B,CACjC,IAAK,IAAIxC,EAAI,EAAGA,EAAIZ,EAAyBrB,OAAS,EAAGiC,IAAK,CAC1D,IAAMpC,EAAOwB,EAAyBY,GACtCyB,SAASgB,eAAT,eAAgC7E,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOU,UACpD,6BAER,OAEJ,IAAMY,EAAOJ,EAAoBwC,GACjCyB,SAASgB,eAAT,eAAgC7E,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOU,UACpD,0B,sCAIIQ,EAAqB4B,GAA2B,IAAD,OAC3DhD,KAAKoF,SAAS,CAACF,aAAa,IAE5B,IADA,IAAMkB,EAA4BhF,EAAoBO,OAFK,WAGlDiC,GACL,GAAIA,IAAMwC,EAIN,OAHAE,YAAW,WACP,EAAKC,oBAAoBvD,KAC1B,GAAKY,GACF,CAAN,UAEJ0C,YAAW,WACP,IAAM9E,EAAOJ,EAAoBwC,GAEjCyB,SAASgB,eAAT,eAAgC7E,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOU,UACpD,sBACL,GAAKgD,IAZHA,EAAI,EAAGA,GAAKwC,EAA2BxC,IAAK,CAAC,IAAD,IAA5CA,GAA4C,qC,0CAgBrCZ,GAChB,IAD2C,IAAD,WACjCY,GACL0C,YAAW,WACP,GAAI1C,EAAI,EAAG,CACP,IAAMd,EAAeE,EAAyBY,EAAI,GAC9C4C,EAA8BnB,SAASgB,eAAT,eAAgCvD,EAAapC,IAA7C,YAAoDoC,EAAa5C,MAAOuG,WAFnG,uBAGP,YAAmBD,EAAnB,+CAAgD,CAAC,IAAtC7F,EAAqC,QACrB,iBAAnBA,EAAKC,WACLD,EAAK+F,WAAWC,YAAYhG,IAL7B,mFAQX,IAAMa,EAAOwB,EAAyBY,GAClCgD,EAAsBvB,SAASgB,eAAT,eAAgC7E,EAAKd,IAArC,YAA4Cc,EAAKtB,MAC3E0G,EAAoBhG,UAAY,0BAChC,IAAMiG,EAAaxB,SAASyB,cAAc,KAC1CD,EAAWjG,UAAY,eACvBgG,EAAoBG,OAAOF,KAC5B,GAAKjD,IAhBHA,EAAI,EAAGA,EAAIZ,EAAyBrB,OAAS,EAAGiC,IAAM,EAAtDA,GAmBT5D,KAAKoF,SAAS,CACVH,YAAY,EACZC,aAAa,M,0CAIc,IAAjB8B,IAAgB,2DACahH,KAAK0E,MAAzCzD,EADuB,EACvBA,KAAM8D,EADiB,EACjBA,cAAeC,EADE,EACFA,YACtB9D,EAAYD,EAAK8D,EAAcrE,KAAKqE,EAAc7E,KAClDiB,EAAaF,EAAK+D,EAAYtE,KAAKsE,EAAY9E,KAC/CkB,EAAsBJ,EAASC,EAAMC,EAAWC,GAChD6B,EAA2BD,EAA4B5B,GAC7D,GAAI6F,EACAhH,KAAKiH,gBAAgB7F,EAAqB4B,OACzC,CAcD,IAAM/B,EAAOiG,EAAkBlH,KAAK0E,MAAMzD,MAC1CjB,KAAKoF,SAAS,CAACnE,SACfjB,KAAKmH,gBAAgB/F,EAAqB4B,M,yCAK/B5B,EAAqB4B,GAA2B,IAAD,OAC9DhD,KAAKoF,SAAS,CAACF,aAAa,IAI5B,IADA,IAAMkB,GADNhF,EAAsBA,EAAoBmB,QAAO,SAAAf,GAAI,OAAMA,EAAKpB,UAAYoB,EAAKrB,aAC3BwB,OAJQ,WAKrDiC,GACL0C,YAAW,WACP,IAAM9E,EAAOJ,EAAoBwC,GAEjC,GAAIA,EAAI,EAAG,CACP,IAAMd,EAAe1B,EAAoBwC,EAAI,GAC7CyB,SAASgB,eAAT,eAAgCvD,EAAapC,IAA7C,YAAoDoC,EAAa5C,MAAOkH,UAAUC,OAAO,mBAG7F,GAAIzD,IAAMwC,EAA2B,CACjC,IAAMtD,EAAe1B,EAAoBwC,EAAI,GAK7C,OAJAyB,SAASgB,eAAT,eAAgCvD,EAAapC,IAA7C,YAAoDoC,EAAa5C,MAAOkH,UAAUC,OAAO,wBACzFf,YAAW,WACP,EAAKC,oBAAoBvD,KAC1B,IAIPqC,SAASgB,eAAT,eAAgC7E,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOU,WAAa,qBACtE,EAAIgD,IAnBFA,EAAI,EAAGA,GAAKwC,EAA2BxC,IAAM,EAA7CA,K,6CAuBW,IAAD,EACwB5D,KAAK0E,MAAzCzD,EADY,EACZA,KAAM8D,EADM,EACNA,cAAeC,EADT,EACSA,YACtB9D,EAAYD,EAAK8D,EAAcrE,KAAKqE,EAAc7E,KAClDiB,EAAaF,EAAK+D,EAAYtE,KAAKsE,EAAY9E,KAC/CkB,EAAsB+B,EAAYlC,EAAMC,GACxC8B,EDjKP,SAAuC7B,GAG1C,IAFA,IAAM6B,EAA2B,GAC7BC,EAAc9B,EACK,OAAhB8B,GACHD,EAAyBE,QAAQD,GACjCA,EAAcA,EAAYH,aAE9B,OAAOE,EC0J8BsE,CAA8BnG,GAC/DnB,KAAKuH,mBAAmBnG,EAAqB4B,K,+BAGvC,IAAD,SACyChD,KAAK0E,MAA5CzD,EADF,EACEA,KAAM0D,EADR,EACQA,eAAgBG,EADxB,EACwBA,cAC7B,OACI,oCACI,4BAAQ0C,QAAS,kBAAM,EAAK7B,sBAA5B,kCAGA,4BAAQ6B,QAAS,kBAAM,EAAKC,yBAA5B,sCAGA,0BAAM7G,UAAYkE,EAA2B,GAAX,UAAlC,UACA,yBAAKlE,UAAU,QACVK,EAAKuC,KAAI,SAAC9C,EAAKgH,GACZ,OACI,yBAAKC,IAAKD,GACLhH,EAAI8C,KAAI,SAAChC,EAAMoG,GAAa,IAClBlH,EAAiDc,EAAjDd,IAAKR,EAA4CsB,EAA5CtB,IAAKC,EAAuCqB,EAAvCrB,SAAUC,EAA6BoB,EAA7BpB,QAASC,EAAoBmB,EAApBnB,OAAQC,EAAYkB,EAAZlB,SAC5C,OACI,kBAAC,EAAD,CACIqH,IAAKC,EACL1H,IAAKA,EACLC,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACRC,SAAUA,EACVqE,eAAgBA,EAChBpE,YAAa,kBAAM,EAAKsH,gBAAgBnH,EAAKR,EAAKE,EAASD,IAC3DK,aAAc,kBAAM,EAAKsH,iBAAiBpH,EAAKR,IAC/CO,UAAW,kBAAM,EAAKsH,iBACtBrH,IAAKA,iB,GAvPEK,aAmQ7CoE,EAAiB,WAKnB,IADA,IAAMlE,EAAO,GACJP,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAE/B,IADA,IAAMsH,EAAa,GACV9H,EAAM,EAAGA,EAAM,GAAIA,IACxB8H,EAAWvG,KAAKwG,EAAW/H,EAAKQ,IAEpCO,EAAKQ,KAAKuG,GAEd,OAAO/G,GAELgH,EAAa,SAAC/H,EAAKQ,GACrB,MAAO,CACHR,MACAQ,MACAN,QAASM,IAAQyD,GAAkBjE,IAAQkE,EAC3CjE,SAAUO,IAAQ2D,GAAmBnE,IAAQoE,EAC7CjD,SAAUU,IACVC,WAAW,EACX3B,QAAQ,EACRC,UAAU,EACVwC,aAAc,OAGhBmD,EAA4B,SAAChF,EAAMP,EAAKR,GAC1C,IAAM6F,EAAU9E,EAAKiH,QACf1G,EAAOuE,EAAQrF,GAAKR,GAM1B,OALA6F,EAAQrF,GAAKR,GAAb,KACOsB,EADP,CAEInB,QAASmB,EAAKnB,OACdC,UAAU,IAEPyF,GAELC,EAA8B,SAAC/E,EAAMP,EAAKR,GAC5C,IAAM6F,EAAU9E,EAAKiH,QACf1G,EAAOuE,EAAQrF,GAAKR,GAM1B,OALA6F,EAAQrF,GAAKR,GAAb,KACOsB,EADP,CAEIlB,UAAWkB,EAAKlB,SAChBD,QAAQ,IAEL0F,GAELG,EAAiC,SAACjF,EAAMkH,EAAQzH,EAAKR,GACvD,IAAM6F,EAAU9E,EAAKiH,QACfnD,EAAgBgB,EAAQoC,EAAOzH,KAAKyH,EAAOjI,KAC3CkI,EAAWrC,EAAQrF,GAAKR,GAW9B,OATA6F,EAAQoC,EAAOzH,KAAKyH,EAAOjI,KAA3B,KACO6E,EADP,CAEI3E,SAAS,IAGb2F,EAAQrF,GAAKR,GAAb,KACOkI,EADP,CAEIhI,SAAS,IAEN2F,GAELI,EAA+B,SAAClF,EAAMoH,EAAM3H,EAAKR,GACnD,IAAM6F,EAAU9E,EAAKiH,QACflD,EAAce,EAAQsC,EAAK3H,KAAK2H,EAAKnI,KACrCoI,EAASvC,EAAQrF,GAAKR,GAW5B,OATA6F,EAAQsC,EAAK3H,KAAK2H,EAAKnI,KAAvB,KACO8E,EADP,CAEI7E,UAAU,IAGd4F,EAAQrF,GAAKR,GAAb,KACOoI,EADP,CAEInI,UAAU,IAEP4F,GAILmB,EAAoB,SAACjG,GAEvB,IADA,IAAI8E,EAAU,GACLrF,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAE/B,IADA,IAAMsH,EAAa,GACV9H,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAC/B,IAAIsB,EAAI,KACDP,EAAKP,GAAKR,GADT,CAEJ8B,WAAW,EACXc,aAAc,KACdzB,SAAUU,MAEdiG,EAAWvG,KAAKD,GAEhB6D,SAASgB,eAAT,eAAgC7E,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOkH,UAAUC,OAC9D,eAAgB,kBAAmB,wBAAyB,sBAEpEtB,EAAQtE,KAAKuG,GAEjB,OAAOjC,GCjVIwC,E,YA5BX,WAAYtI,GAAQ,IAAD,8BACf,4CAAMA,KACDyE,MAAQ,CACT8D,OAAQ,GAHG,E,yEAUfxI,KAAKoF,UAAS,SAACV,GACX,MAAO,CAAC8D,OAAQ9D,EAAM8D,OAAS,Q,+BAI7B,IAAD,OACDC,EAAWzI,KAAK0E,MAAM8D,OAC1B,OACI,yBAAK5H,UAAU,OACX,4BAAQ4G,QAAS,kBAAM,EAAKkB,cAA5B,cAGA,kBAAC,EAAD,CAAuBf,IAAKc,S,GAvB1B1H,aCQE4H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5D,SAASgB,eAAe,SD2H3C,kBAAmB6C,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ae7c399f.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n    render() {\n        const {\n            col,\n            isFinish,\n            isStart,\n            isWall,\n            isWeight,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            row,\n        } = this.props;\n        const icon = isFinish\n            ? <i className=\"fas fa-flag-checkered\"/>\n            : isStart\n                ? <i className=\"fas fa-truck-loading\"/>\n                : isWeight\n                    ? <i className=\"fas fa-traffic-light\"/>\n                    : '';\n        const wallClassName = isWall ? 'node-wall' : '';\n\n\n        // <i className=\"fas fa-flag-checkered\"></i>\n        // <i className=\"fas fa-truck\"></i>\n        // <i className=\"fas fa-truck-loading\"></i>\n\n        return (\n            <div\n                id={`node-${row}-${col}`}\n                className={`node ${wallClassName}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}>{icon}</div>\n        );\n    }\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        // If we encounter a wall, we skip it.\n        if (closestNode.isWall) continue;\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        relax(node, neighbor, neighbor.isWeight);\n    }\n}\n\nfunction relax(source, destination, isWeight) {\n    let weight = 1;\n    if(isWeight)\n        weight = 6;\n    if(destination.distance > source.distance + weight) {\n        destination.distance = source.distance + weight;\n        destination.previousNode = source;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}","// Performs Bellman Ford's algorithm; returns a randomized array of visited nodes.\n// Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function bellmanFord(grid, startNode, finishNode) {\n    const visitedNodes = [];\n    startNode.distance = 0;\n    const vertices = getAllNodes(grid).filter(node => !node.isWall);\n    const edges = getEdges(vertices, grid);\n    // copy the destination node\n    // array randomized for the animation\n    // this array is for animation only\n    visitedNodes.push(...edges.map(edge => edge[1]));\n    shuffleArray(visitedNodes);\n\n    for (let i = 0; i < vertices.length - 1; i++) {\n        edges.forEach(edge => relax(edge[0], edge[1], edge[1].isWeight));\n    }\n    // todo: negative cycle\n    return visitedNodes;\n}\n\nfunction getEdges(vertices, grid) {\n    let unpackedEdges = [];\n    let edges = vertices.map(node => getUnvisitedNeighbors(node, grid).map(neighbor => [node, neighbor]));\n    for (const neighbors of edges) {\n        for (const edge of neighbors) {\n            unpackedEdges.push(edge);\n        }\n    }\n    return unpackedEdges;\n}\n\nfunction relax(source, destination, isWeight) {\n    let weight = 1;\n    if (isWeight)\n        weight = 6;\n    if (destination.distance > source.distance + weight) {\n        destination.distance = source.distance + weight;\n        destination.previousNode = source;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isWall);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the bellmanFord method above.\nexport function getNodesInShortestPathOrderBF(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/Dijkstra';\n\nimport './PathfindingVisualizer.css';\nimport {bellmanFord, getNodesInShortestPathOrderBF} from \"../Algorithms/BellmanFord\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.wPressed = this.wPressed.bind(this);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            startIsPressed: false,\n            endIsPressed: false,\n            wKeyIsPressed: false,\n            previousStart: {row: START_NODE_ROW, col: START_NODE_COL},\n            previousEnd: {row: FINISH_NODE_ROW, col: FINISH_NODE_COL},\n            isAlgoDone: false,\n            isAnimation: false,\n        };\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n        document.addEventListener(\"keydown\", this.wPressed, false);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.wPressed, false);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        let finishDijkstra = ((this.state.endIsPressed || this.state.startIsPressed) && this.state.isAlgoDone\n            && (prevState.previousEnd !== this.state.previousEnd || prevState.previousStart !== this.state.previousStart));\n        if (finishDijkstra) this.visualizeDijkstra(false);\n    }\n\n    wPressed(event) {\n        if (event.keyCode === 87) {\n            this.setState({wKeyIsPressed: !this.state.wKeyIsPressed})\n        }\n    }\n\n    handleMouseDown(row, col, isStart, isEnd) {\n        if (!this.state.isAnimation) {\n            if (isStart) {\n                this.setState({startIsPressed: true, mouseIsPressed: true, previousStart: {row, col}});\n            } else if (isEnd) {\n                this.setState({endIsPressed: true, mouseIsPressed: true, previousEnd: {row, col}});\n            } else {\n                let newGrid;\n                if (this.state.wKeyIsPressed) {\n                    newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n                } else {\n                    newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n                }\n                this.setState({grid: newGrid, mouseIsPressed: true});\n            }\n        }\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        if (!this.state.startIsPressed && !this.state.endIsPressed) {\n            let newGrid;\n            if (this.state.wKeyIsPressed) {\n                newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n            } else {\n                newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n            }\n            this.setState({grid: newGrid});\n        } else {\n            // Avoid case where endNode = StartNode = wall\n            const currentNode = this.state.grid[row][col];\n            if (!currentNode.isWall) {\n                if (this.state.startIsPressed && !currentNode.isFinish) {\n                    const newGrid = getNewGridWithStartNodeUpdated(this.state.grid, this.state.previousStart, row, col);\n                    this.setState({grid: newGrid, previousStart: {row, col}});\n                } else if (!currentNode.isStart && this.state.endIsPressed) {\n                    const newGrid = getNewGridWithEndNodeUpdated(this.state.grid, this.state.previousEnd, row, col);\n                    this.setState({grid: newGrid, previousEnd: {row, col}});\n                }\n            }\n        }\n    }\n\n    handleMouseUp() {\n        this.setState({mouseIsPressed: false, startIsPressed: false, endIsPressed: false});\n    }\n\n    //Todo: this function should be merged w/ animateDijkstra\n    /// display Algorithm without time out or animation, instant display\n    displayDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        // We don't want the animation to cover the end Node (hence - 1)\n        const visitedNodesInOrderLength = visitedNodesInOrder.length - 1;\n        // We start at 1 so the animation do not cover the start Node\n        for (let i = 1; i <= visitedNodesInOrderLength; i++) {\n            if (i === visitedNodesInOrderLength) {\n                for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\n                    const node = nodesInShortestPathOrder[i];\n                    document.getElementById(`node-${node.row}-${node.col}`).className =\n                        'node node-shortest-path-na';\n                }\n                return;\n            }\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n                'node node-visited-na';\n        }\n    }\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        this.setState({isAnimation: true});\n        const visitedNodesInOrderLength = visitedNodesInOrder.length;\n        for (let i = 0; i <= visitedNodesInOrderLength; i++) {\n            if (i === visitedNodesInOrderLength) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                //TODO: look to get rid off that document.getElementById maybe add to condition in Node.js\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\n            setTimeout(() => {\n                if (i > 1) {\n                    const previousNode = nodesInShortestPathOrder[i - 1];\n                    let previousNodeDocumentElement = document.getElementById(`node-${previousNode.row}-${previousNode.col}`).childNodes;\n                    for (const icon of previousNodeDocumentElement) {\n                        if (icon.className === \"fas fa-truck\")\n                            icon.parentNode.removeChild(icon);\n                    }\n                }\n                const node = nodesInShortestPathOrder[i];\n                let nodeDocumentElement = document.getElementById(`node-${node.row}-${node.col}`);\n                nodeDocumentElement.className = 'node node-shortest-path';\n                const icon_truck = document.createElement('i');\n                icon_truck.className = 'fas fa-truck';\n                nodeDocumentElement.append(icon_truck);\n            }, 50 * i);\n        }\n        // End of the animation, Algorithm is done\n        this.setState({\n            isAlgoDone: true,\n            isAnimation: false,\n        })\n    }\n\n    visualizeDijkstra(animate = true) {\n        const {grid, previousStart, previousEnd} = this.state;\n        const startNode = grid[previousStart.row][previousStart.col];\n        const finishNode = grid[previousEnd.row][previousEnd.col];\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        if (animate)\n            this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n        else {\n            //TODO: refactor\n\n            // let grid = getInitialGrid();\n            // const previousStart = this.state.previousStart;\n            // const previousEnd = this.state.previousEnd;\n            // grid = getNewGridWithStartNodeUpdated(grid, {\n            //     row: START_NODE_ROW,\n            //     col: START_NODE_COL\n            // }, previousStart.row, previousStart.col);\n            // grid = getNewGridWithEndNodeUpdated(grid, {\n            //     row: FINISH_NODE_ROW,\n            //     col: FINISH_NODE_COL\n            // }, previousEnd.row, previousEnd.col);\n            const grid = resetNodesVisited(this.state.grid);\n            this.setState({grid});\n            this.displayDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n        }\n\n    }\n\n    animateBellmanFord(visitedNodesInOrder, nodesInShortestPathOrder) {\n        this.setState({isAnimation: true});\n        // No animation on start and finish node\n        visitedNodesInOrder = visitedNodesInOrder.filter(node => (!node.isStart && !node.isFinish));\n        const visitedNodesInOrderLength = visitedNodesInOrder.length;\n        for (let i = 0; i <= visitedNodesInOrderLength; i++) {\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                // Change background back to white\n                if (i > 0) {\n                    const previousNode = visitedNodesInOrder[i - 1];\n                    document.getElementById(`node-${previousNode.row}-${previousNode.col}`).classList.remove('node-visited-na');\n                }\n                // display shortest path and change background back to white to the last node\n                if (i === visitedNodesInOrderLength) {\n                    const previousNode = visitedNodesInOrder[i - 1];\n                    document.getElementById(`node-${previousNode.row}-${previousNode.col}`).classList.remove('node-visited-na');\n                    setTimeout(() => {\n                        this.animateShortestPath(nodesInShortestPathOrder);\n                    }, 10);\n                    return;\n                }\n                //TODO: look to get rid off that document.getElementById maybe add to condition in Node.js\n                document.getElementById(`node-${node.row}-${node.col}`).className += ' node-visited-na';\n            }, 2 * i);\n        }\n    }\n\n    visualizeBellmanFord() {\n        const {grid, previousStart, previousEnd} = this.state;\n        const startNode = grid[previousStart.row][previousStart.col];\n        const finishNode = grid[previousEnd.row][previousEnd.col];\n        const visitedNodesInOrder = bellmanFord(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBF(finishNode);\n        this.animateBellmanFord(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    render() {\n        const {grid, mouseIsPressed, wKeyIsPressed} = this.state;\n        return (\n            <>\n                <button onClick={() => this.visualizeDijkstra()}>\n                    Visualize Dijkstra's Algorithm\n                </button>\n                <button onClick={() => this.visualizeBellmanFord()}>\n                    Visualize Bellman Ford's Algorithm\n                </button>\n                <span className={!wKeyIsPressed ? 'hidden' : ''}>Weight</span>\n                <div className=\"grid\">\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const {row, col, isFinish, isStart, isWall, isWeight} = node;\n                                    return (\n                                        <Node\n                                            key={nodeIdx}\n                                            col={col}\n                                            isFinish={isFinish}\n                                            isStart={isStart}\n                                            isWall={isWall}\n                                            isWeight={isWeight}\n                                            mouseIsPressed={mouseIsPressed}\n                                            onMouseDown={() => this.handleMouseDown(row, col, isStart, isFinish)}\n                                            onMouseEnter={() => this.handleMouseEnter(row, col)}\n                                            onMouseUp={() => this.handleMouseUp()}\n                                            row={row}\n                                        />\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n}\nconst getInitialGrid = () => {\n    // WARNING: the number of rows and columns should also be modified in Node.css\n    // AND in resetNodesVisited\n    //Todo: Put row and col as Constant\n    const grid = [];\n    for (let row = 0; row < 30; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 60; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        isWeight: false,\n        previousNode: null,\n    };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    newGrid[row][col] = {\n        ...node,\n        isWall: !node.isWall,\n        isWeight: false,\n    };\n    return newGrid;\n};\nconst getNewGridWithWeightToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    newGrid[row][col] = {\n        ...node,\n        isWeight: !node.isWeight,\n        isWall: false,\n    };\n    return newGrid;\n};\nconst getNewGridWithStartNodeUpdated = (grid, pStart, row, col) => {\n    const newGrid = grid.slice();\n    const previousStart = newGrid[pStart.row][pStart.col];\n    const newStart = newGrid[row][col];\n\n    newGrid[pStart.row][pStart.col] = {\n        ...previousStart,\n        isStart: false,\n    };\n\n    newGrid[row][col] = {\n        ...newStart,\n        isStart: true,\n    };\n    return newGrid;\n};\nconst getNewGridWithEndNodeUpdated = (grid, pEnd, row, col) => {\n    const newGrid = grid.slice();\n    const previousEnd = newGrid[pEnd.row][pEnd.col];\n    const newEnd = newGrid[row][col];\n\n    newGrid[pEnd.row][pEnd.col] = {\n        ...previousEnd,\n        isFinish: false,\n    };\n\n    newGrid[row][col] = {\n        ...newEnd,\n        isFinish: true,\n    };\n    return newGrid;\n};\n// We are resetting the grid entirely which is not optimal\n// todo: Should not create a new grid should only modify the current grid\nconst resetNodesVisited = (grid) => {\n    let newGrid = [];\n    for (let row = 0; row < 30; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 60; col++) {\n            let node = {\n                ...grid[row][col],\n                isVisited: false,\n                previousNode: null,\n                distance: Infinity,\n            };\n            currentRow.push(node);\n            //Todo: take care of this document.getElementById!\n            document.getElementById(`node-${node.row}-${node.col}`).classList.remove(\n                \"node-visited\", \"node-visited-na\", \"node-shortest-path-na\", \"node-shortest-path\");\n        }\n        newGrid.push(currentRow);\n    }\n    return newGrid;\n};\n\n\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport PathFindingVisualiser from \"./PathFindingVisualizer/PathFindingVisualizer\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridId: 0,\n        }\n    }\n\n    // By updating the key of a Component we force the Dom to rerender\n    // and erase the previous Grid\n    resetGrid() {\n        this.setState((state) => {\n            return {gridId: state.gridId + 1}\n        })\n    }\n\n    render() {\n        let uniqueId = this.state.gridId;\n        return (\n            <div className=\"App\">\n                <button onClick={() => this.resetGrid()}>\n                    Reset Grid\n                </button>\n                <PathFindingVisualiser key={uniqueId}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}